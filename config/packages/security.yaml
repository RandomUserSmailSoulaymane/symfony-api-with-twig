security:
  password_hashers:
    App\Entity\User:
      algorithm: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # 1) Login firewall for obtaining JWT tokens
    login:
      pattern: ^/api/login$
      stateless: true
      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # 2) Registration firewall for /api/users
    registration:
      pattern: ^/api/users$
      stateless: true
      security: false # No authentication required for registration

    # 3) API firewall for everything else under /api
    api:
      pattern: ^/api
      stateless: true
      jwt: ~

  access_control:
    # Allow anonymous access to login
    - { path: ^/api/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # Allow anonymous access to user registration
    - { path: ^/api/users$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # Protect all other API routes
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
