{
	"info": {
		"_postman_id": "819d1fc7-f42a-4880-8664-5cf3e199ce51",
		"name": "TWIG / API TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28973141",
		"_collection_link": "https://gold-rocket-496109.postman.co/workspace/c69cd4d2-50a5-4455-8b04-19575aa61c5a/collection/28973141-819d1fc7-f42a-4880-8664-5cf3e199ce51?action=share&source=collection_link&creator=28973141"
	},
	"item": [
		{
			"name": "Retrieve all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each product has id, name, and price\", function () {\r",
							"  const products = pm.response.json();\r",
							"  if (products.length > 0) {\r",
							"    products.forEach(product => {\r",
							"      pm.expect(product).to.have.property(\"id\");\r",
							"      pm.expect(product).to.have.property(\"name\");\r",
							"      pm.expect(product).to.have.property(\"price\");\r",
							"    });\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a single product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has product fields\", () => {\r",
							"  const product = pm.response.json();\r",
							"  pm.expect(product).to.be.an(\"object\");\r",
							"  pm.expect(product).to.have.property(\"id\");\r",
							"  pm.expect(product).to.have.property(\"name\");\r",
							"  pm.expect(product).to.have.property(\"price\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/products/13",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"products",
						"13"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes success message and product id\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.eql(\"Product created\");\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"HDMI Cable (2m)\",\r\n  \"price\": \"4.99\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/products",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an existing product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Product updated message\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.eql(\"Product updated\");\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Gillete Blue 3\",\r\n  \"price\": \"4.50\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/products/12",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"products",
						"12"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a product by its ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes 'Product deleted' message\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.eql(\"Product deleted\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/products/12",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"products",
						"12"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve all articles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Articles response is an array\", () => {\r",
							"  const articles = pm.response.json();\r",
							"  pm.expect(articles).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each article has required fields\", () => {\r",
							"  const articles = pm.response.json();\r",
							"  if (articles.length > 0) {\r",
							"    articles.forEach(article => {\r",
							"      pm.expect(article).to.have.property(\"id\");\r",
							"      pm.expect(article).to.have.property(\"title\");\r",
							"      pm.expect(article).to.have.property(\"content\");\r",
							"    });\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/articles",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"articles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a single article by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"If found, article has correct fields\", () => {\r",
							"  if (pm.response.code === 200) {\r",
							"    const article = pm.response.json();\r",
							"    pm.expect(article).to.have.property(\"id\");\r",
							"    pm.expect(article).to.have.property(\"title\");\r",
							"    pm.expect(article).to.have.property(\"content\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/articles/5",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"articles",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new article",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes 'Article created' message and an id\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.eql(\"Article created\");\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Authentication with JWT in Symfony\",\r\n  \"content\": \"A quick guide on securing your API endpoints using LexikJWTAuthenticationBundle.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/articles",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"articles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an existing article",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Article update success message\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property(\"message\");\r",
							"  pm.expect(jsonData.message).to.eql(\"Article updated\");\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Optimizing Performance in Symfony\",\r\n  \"content\": \"Tips on caching, environment configuration, and code profiling to speed up your app.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/articles/3",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"articles",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a product by its ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check deletion response structure\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  \r",
							"  // If the article was found and deleted:\r",
							"  //   { \"message\": \"Article deleted\" }\r",
							"  // If not found:\r",
							"  //   { \"error\": \"Article not found\" } (or a similar structure)\r",
							"  \r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  \r",
							"  if (pm.response.code === 200) {\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Article deleted\");\r",
							"  } else if (pm.response.code === 404) {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.eql(\"Article not found\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/articles/12",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"articles",
						"12"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Registratrion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created) or 400 if user exists\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has registration success or error\", () => {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  // If created:\r",
							"  //   { message: 'User created', id: <newUserId> }\r",
							"  // If error:\r",
							"  //   { error: 'User already exists' }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"newuser@example.com\",\r\n  \"password\": \"securepassword\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/users",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 401\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"If success, response has token\", () => {\r",
							"  if (pm.response.code === 200) {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"newuser@example.com\",\r\n  \"password\": \"securepassword\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}